// Обработчик для кнопки "Перейти к карте"
const enterButton = document.getElementById('enter-button');
if (enterButton) {
    enterButton.addEventListener('click', () => {
        window.location.href = 'map.html';
    });
}

// Обработчик для кнопки "Назад в главное меню"
const backToWelcomeButton = document.getElementById('back-to-welcome');
if (backToWelcomeButton) {
    backToWelcomeButton.addEventListener('click', () => {
        window.location.href = 'index.html';
    });
}

// Проверка для страницы section.html
if (document.getElementById('section-content')) {
    const backButton = document.getElementById('back-button');
    if (backButton) {
        backButton.addEventListener('click', () => {
            window.location.href = 'map.html';
        });
    }

    const sections = {
        "intro": {
            title: "Введение в Web-дизайн",
            content: [
                "Веб-дизайн — это процесс создания и оформления веб-сайтов, который сочетает в себе эстетику, функциональность и удобство пользования.",
                "Ключевые элементы веб-дизайна:",
                "• Визуальный стиль. Выбор цветовой палитры, шрифтов, графики и других визуальных элементов, которые придают сайту уникальность и соответствуют бренду.",
                "• Макет и структура страниц. Организация контента на страницах сайта, размещение заголовков, текста, изображений, иконок и других элементов в логическом и удобном порядке.",
                "• Навигация. Разработка удобной и интуитивной системы навигации, которая позволяет пользователям легко находить нужную информацию.",
                "• Интерактивные элементы. Это кнопки, формы, всплывающие окна, слайдеры и другие элементы, с которыми пользователь взаимодействует.",
                "• Адаптивный дизайн. Обеспечение корректного отображения и работы сайта на различных устройствах — от настольных компьютеров до мобильных телефонов.",
                "Цели веб-дизайна:",
                "• Создание удобного и интуитивно понятного интерфейса. Пользователи должны легко находить нужную информацию и выполнять желаемые действия на веб-странице.",
                "• Донесение информации до целевой аудитории. Веб-дизайн помогает структурировать информацию, сделать её доступной и понятной для пользователей.",
                "• Повышение узнаваемости бренда. Уникальный стиль сайта помогает пользователям запомнить бренд и его ценности.",
                "• Увеличение конверсии. Веб-дизайн может повысить эффективность сайта, например, увеличить количество продаж в интернет-магазине или количество подписчиков на рассылку.",
                "• Обеспечение доступности для всех пользователей. Веб-дизайн должен быть доступным для людей с ограниченными возможностями, например, с нарушениями зрения или слуха."
            ]
        },
        "history": {
            title: "История веб-дизайна",
            content: [
                "1990-е годы: Рождение Интернета",
                "В начале 1990-х веб-дизайн был примитивен: сайты состояли из простого текста, оформленного HTML-тегами. Первый сайт, созданный Тимом Бернерсом-Ли в 1991 году, был лишь гипертекстовой системой.",
                "В те годы возможности веб-дизайна были ограничены. Браузеры поддерживали только базовые HTML-теги, такие как <h1>, <p>, <a>, и не было возможности использовать стили CSS или JavaScript для создания более сложных и интерактивных элементов.",
                "Появление Mosaic и Netscape Navigator внесло революцию: теперь сайты могли содержать графику и ссылки, делая их более привлекательными. Веб-дизайнеры начали экспериментировать с форматами и стилями.",
                "Введение CSS (Cascading Style Sheets) в конце 1990-х позволило отделить дизайн от контента, упростив создание и обновление сайтов. JavaScript добавил интерактивность, позволяя создавать анимации, формы и динамические элементы.",
                "В 2000-е годы началась стандартизация веб-технологий, обеспечивающая работу сайтов в разных браузерах. Новые технологии, такие как HTML5 и CSS3, позволили создавать более сложные и интерактивные сайты.",
                "Развитие инструментов и технологий, таких как редакторы кода и фреймворки, сделало веб-дизайн более доступным и эффективным."
            ],
            images: [
                "images/history1.jpg",
                "images/history2.jpg",
                "images/history2.jpg"
            ]
        },
        "composition": {
            title: "Основы визуальной композиции",
            content: [
                "Основы визуальной композиции для веб-дизайна – это ключевые концепции, которые помогают создавать привлекательные и эффективные веб-страницы.",
                "Цветовая гамма",
                "Выбор цвета играет важную роль в создании атмосферы и настроения веб-дизайна, для этого необходимо:",
                "• Учитывать целевую аудиторию: разные группы людей реагируют на разные цвета по-разному.",
                "• Использовать цветовую теорию.",
                "• Создавать контрастные пары: комбинирование цветов, которые хорошо контрастируют друг друга для улучшения читаемости текста.",
                "Примеры успешных цветовых решений: Facebook, Airbnb",
                "Типографика",
                "Типографика играет ключевую роль в веб-дизайне, так как она влияет на восприятие информации пользователем. Вот несколько важных аспектов типографики:",
                "• Выбор шрифтов, соответствующих бренду и целевой аудитории.",
                "• Использование не более двух основных шрифтов: один для заголовков, другой для основного текста.",
                "• Обеспечение контрастности между текстом и фоном для улучшения читаемости.",
                "Примеры эффективного использования типографики: Google (Roboto), Apple (San Francisco).",
                "Использование изображений",
                "Изображения могут значительно улучшить визуальный опыт пользователя. Вот несколько советов по использованию изображений:",
                "• Выбор качественных изображений, соответствующих бренду и целевой аудитории.",
                "• Оптимизация изображения для быстрой загрузки: использование правильных форматов (JPEG, PNG) и размеров."
            ]
        },
        "structure": {
            title: "Структура и навигация сайта",
            content: [
                "Структура и навигация сайта являются критически важными аспектами веб-дизайна, влияющими на удобство использования и эффективность взаимодействия пользователей с контентом.",
                "Проектирование информационной архитектуры",
                "Информационная архитектура сайта определяет логическую структуру контента и его организации. Вот несколько ключевых моментов:",
                "• Разделение контента на логические категории и секции.",
                "• Создание иерархии страниц для организации информации.",
                "• Оптимизация глубины: ограничение количество уровней в иерархии до 3-4 для удобства навигации.",
                "• Ключевые страницы: определение основных разделов и их расположение в иерархии.",
                "• Индексация контента, которая позволяет легко находить нужную информацию.",
                "Примеры эффективных архитектур: Amazon - четкая иерархия товаров с категориями и подкатегориями Wikipedia - глубокая иерархия статей с удобной навигацией.",
                "Создание навигационного меню",
                "Навигационное меню должно быть интуитивно понятным и удобным для пользователя:",
                "• Типы меню: карусель, горизонтальное, вертикальное, выпадающее",
                "• Количество пунктов: ограничение до 7-10 основных пунктов для предотвращения перегруженности",
                "• Группировка элементов",
                "• Активные ссылки: использование подсветки активного пункта для улучшения навигации",
                "• Мобильная адаптивность",
                "Примеры эффективных меню: Facebook - горизонтальное меню с логотипом и основными функциями LinkedIn - вертикальное меню с выпадающими подкатегориями"
            ]
        },
        "technical": {
            title: "Технические аспекты Web-дизайна",
            content: [
                "Технические аспекты Web-дизайна, особенно знание HTML, CSS и JavaScript, являются фундаментальными для создания современных веб-приложений. Давайте рассмотрим каждый из этих языков подробнее.",
                "HTML (HyperText Markup Language)",
                "HTML - это стандартный язык разметки гипертекста, используемый для структурирования и представления содержимого веб-страниц.",
                "Основные концепции HTML:",
                "• Структура документа: каждая веб-страница начинается с <html> и заканчивается на </html>",
                "• Семантические теги: <header>, <nav>, <main>, <section>, <article>, <aside>, <footer>",
                "• Блоковые и инлайновые элементы: <div>, <span>, <p>, <ul>, <ol>, <li>",
                "• Метаданные: <title>, <meta>, <link>",
                "CSS (Cascading Style Sheets)",
                "CSS позволяет отделить оформление сайта от его структуры, обеспечивая гибкость и стилизацию контента.",
                "Основные аспекты CSS:",
                "• Селекторы, свойства и значения: для назначения стилей конкретным элементам",
                "• Расположение элементов на странице: использование flexbox, grid, positioning",
                "• Анимации и трансформации: для создания плавных переходов",
                "• Адаптивность и медиа-запросы: использование @media для создания отзывчивых сайтов",
                "JavaScript",
                "JavaScript — это язык программирования, который добавляет интерактивность и динамическое поведение на веб-страницу.",
                "Основные возможности JavaScript:",
                "• Обработчики событий: для реагирования на действия пользователя (клик, прокрутка и т. д.)",
                "• Манипуляции с DOM: изменение элементов на странице в ответ на действия пользователя",
                "• Асинхронное программирование: использование обещаний (Promises), async/await для обработки запросов"
            ]
        }
    };

    const currentSection = window.location.hash.substring(1);
    const section = sections[currentSection];

    if (section) {
        document.getElementById('section-title').textContent = section.title;
        const contentDiv = document.getElementById('section-content');
        section.content.forEach(line => {
            const paragraph = document.createElement('p');
            paragraph.textContent = line;
            contentDiv.appendChild(paragraph);
        });
    }
}
